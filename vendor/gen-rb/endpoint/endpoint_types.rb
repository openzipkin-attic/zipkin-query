#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#


module Twitter
  module Thrift
        module Status
          DEAD = 0
          STARTING = 1
          ALIVE = 2
          STOPPING = 3
          STOPPED = 4
          WARNING = 5
          VALUE_MAP = {0 => "DEAD", 1 => "STARTING", 2 => "ALIVE", 3 => "STOPPING", 4 => "STOPPED", 5 => "WARNING"}
          VALID_VALUES = Set.new([DEAD, STARTING, ALIVE, STOPPING, STOPPED, WARNING]).freeze
        end

        class Endpoint
          include ::Thrift::Struct, ::Thrift::Struct_Union
          HOST = 1
          PORT = 2

          FIELDS = {
            HOST => {:type => ::Thrift::Types::STRING, :name => 'host'},
            PORT => {:type => ::Thrift::Types::I32, :name => 'port'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class ServiceInstance
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SERVICEENDPOINT = 1
          ADDITIONALENDPOINTS = 2
          STATUS = 3

          FIELDS = {
            SERVICEENDPOINT => {:type => ::Thrift::Types::STRUCT, :name => 'serviceEndpoint', :class => Twitter::Thrift::Endpoint},
            ADDITIONALENDPOINTS => {:type => ::Thrift::Types::MAP, :name => 'additionalEndpoints', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => Twitter::Thrift::Endpoint}},
            STATUS => {:type => ::Thrift::Types::I32, :name => 'status', :enum_class => Twitter::Thrift::Status}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @status.nil? || Twitter::Thrift::Status::VALID_VALUES.include?(@status)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field status!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

      end
    end
